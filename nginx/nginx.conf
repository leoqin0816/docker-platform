# 启动进程，通常设置和cpu数量相等
worker_processes 2;
# worker_processes auto;
# 以下参数指定了哪个cpu分配给哪个进程，一般来说不用特殊指定。如果一定要设的话，用0和1指定分配方式.
# 这样设就是给1-4个进程分配单独的核来运行，出现第5个进程是就是随机分配了。
# eg:
# worker_processes 4     #4核CPU 
# worker_cpu_affinity 0001 0010 0100 1000

# 指定进程ID存储文件位置
pid /run/nginx.pid;

daemon off;

# 全局错误日志及PID文件  [debug|info|notice|warn|crit]
error_log  /var/logs/nginx/error.log;
# error_log  logs/error.log  notice;
# error_log  logs/error.log  info;

#一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n的值保持一致。
#vim /etc/security/limits.conf
#  *                soft    nproc          65535
#  *                hard    nproc          65535
#  *                soft    nofile         65535
#  *                hard    nofile         65535
worker_rlimit_nofile 65535;

#工作模式及连接数上限
events {
  # use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，如果跑在FreeBSD上面，就用kqueue模型
  # epoll是多路复用IO(I/O Multiplexing)中的一种方式,
  # 仅用于linux2.6以上内核,可以大大提高nginx的性能
  use  epoll;

  # 单个后台worker process进程的最大并发链接数 
  worker_connections  2048;
  # 并发总数是 worker_processes 和 worker_connections 的乘积
  # 即 max_clients = worker_processes * worker_connections
  # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么
  # 为什么上面反向代理要除以4，应该说是一个经验值
  # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000
  # worker_connections 值的设置跟物理内存大小有关
  # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数
  # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右
  # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：
  # $ cat /proc/sys/fs/file-max
  # 输出 34336
  # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内
  # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置
  # 使得并发总数小于操作系统可以打开的最大文件数目
  # 其实质也就是根据主机的物理CPU和内存进行配置
  # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。
  # ulimit -SHn 65535

  # worker工作方式：串行（一定程度降低负载，但服务器吞吐量大时，关闭使用并行方式
  multi_accept on;
}

http {
  server_tokens off;
  # sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
  # 对于普通应用，必须设为 on,
  # 如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
  # 以平衡磁盘与网络I/O处理速度，降低系统的uptime.

  # 连接超时时间
  types_hash_max_size 2048;

  # 文件扩展名与文件类型映射表,设定mime类型,类型由mime.type文件定义
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  #日志相关定义
  # log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
  #                  '$status $body_bytes_sent "$http_referer" '
  #                  '"$http_user_agent" "$http_x_forwarded_for"';
  # 定义日志的格式。后面定义要输出的内容。
  # 1.$remote_addr 与$http_x_forwarded_for 用以记录客户端的ip地址；
  # 2.$remote_user ：用来记录客户端用户名称；
  # 3.$time_local ：用来记录访问时间与时区；
  # 4.$request  ：用来记录请求的url与http协议；
  # 5.$status ：用来记录请求状态； 
  # 6.$body_bytes_sent ：记录发送给客户端文件主体内容大小；
  # 7.$http_referer ：用来记录从那个页面链接访问过来的；
  # 8.$http_user_agent ：记录客户端浏览器的相关信息
  # 连接日志的路径，指定的日志格式放在最后。
  # access_log  logs/access.log  main;
  # 只记录更为严重的错误日志，减少IO压力
  # error_log logs/error.log crit;
  # 关闭日志
  # access_log  off;
  access_log /var/logs/nginx/access.log;

  # 默认编码
  charset utf-8;

  # 服务器名字的hash表大小
  # server_names_hash_bucket_size 128;

  #客户端请求单个文件的最大字节数
  client_max_body_size 20m;

  # 指定来自客户端请求头的hearerbuffer大小
  # client_header_buffer_size 32k;
  # 指定客户端请求中较大的消息头的缓存最大数量和大小。
  # large_client_header_buffers 4 64k;
  # 开启高效传输模式。
  sendfile on;

  #防止网络阻塞
  tcp_nopush on;
  tcp_nodelay on;

  # 客户端连接超时时间，单位是秒
  keepalive_timeout 15;
  # 客户端请求头读取超时时间
  # client_header_timeout 10;
  # 设置客户端请求主体读取超时时间
  # client_body_timeout 10;
  # 响应客户端超时时间
  # send_timeout 10;

  #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。
  fastcgi_connect_timeout 300;
  fastcgi_send_timeout 300;
  fastcgi_read_timeout 300;
  fastcgi_buffer_size 64k;
  fastcgi_buffers 4 64k;
  fastcgi_busy_buffers_size 128k;
  fastcgi_temp_file_write_size 128k;

  #gzip模块设置
  # 开启gzip压缩输出
  gzip on; 
  # 最小压缩文件大小
  # gzip_min_length 1k; 
  # 压缩缓冲区
  # gzip_buffers 4 16k;
  # 压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
  # gzip_http_version 1.0;
  # 压缩等级 1-9 等级越高，压缩效果越好，节约宽带，但CPU消耗大
  # gzip_comp_level 2;
  # 压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。
  # gzip_types text/plain application/x-javascript text/css application/xml;
  #前端缓存服务器缓存经过压缩的页面
  # gzip_vary on;
  gzip_disable "msie6";
  
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

  include /etc/nginx/conf.d/*.conf;
  include /etc/nginx/sites-available/*.conf;
  open_file_cache off; # Disabled for issue 619
}
