version: "3.5"

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  mariadb:
    driver: ${VOLUMES_DRIVER}
  postgres:
    driver: ${VOLUMES_DRIVER}
  memcached:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  mongodb:
    driver: ${VOLUMES_DRIVER}
  couchdb:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  nexus3:
    driver: ${VOLUMES_DRIVER}
  nexus-data: {}

services:

### nexus3 ###############################################
  nexus3:
    build:
      context: ./nexus3
    environment:
      - INSTALL4J_ADD_VM_PARAMS=${NEXUS3_ARFUMENTS}
    volumes:
      - ${DATA_PATH_HOST}/nexus3:/nexus-data
      - ${NEXUS3_HOST_LOG_PATH}:/nexus-data/logs
    ports:
      - "${NEXUS3_HOST_PORT}:8081"
    networks:
      - frontend
      - backend

### tomcat Server ########################################
  tomcat:
    build:
      context: ./tomcat
      args: 
        - TZ=${TZ}
    volumes:
      - ${APP_CODE_PATH_HOST}/tomcat/webapps:/usr/local/tomcat/webapps
      - ${TOMCAT_HOST_LOG_PATH}:/usr/local/tomcat/logs
      - ${TOMCAT_CONF_PATH}:/usr/local/tomcat/conf
    ports:
      - "${TOMCAT_HOST_PORT}:8080"
    networks:
      - frontend
      - backend

### NGINX Server Container ################################
  nginx:
    build:
      context: ./nginx
      args: 
        - TZ=${TZ}
    volumes:
      - ${APP_CODE_PATH_HOST}/nginx:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${NGINX_HOST_LOG_PATH}:/var/logs/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    networks:
      - frontend
      - backend

### Apache Server ########################################
  apache2:
    build:
      context: ./apache2
      args: 
        - TZ=${TZ}
    volumes:
      - ${APP_CODE_PATH_HOST}/apache2:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${APACHE_HOST_LOG_PATH}:/var/logs/apache2
      - ${APACHE_SITES_PATH}:/etc/apache2/sites-available
    ports:
      - "${APACHE_HOST_HTTP_PORT}:80"
      - "${APACHE_HOST_HTTPS_PORT}:443"
    networks:
      - frontend
      - backend

### Caddy Server #########################################
  caddy:
    build: ./caddy
    volumes:
      - ${APP_CODE_PATH_HOST}/caddy:${APP_CODE_PATH_CONTAINER}${APP_CODE_CONTAINER_FLAG}
      - ${CADDY_CONFIG_PATH}:/etc/caddy
      - ${CADDY_HOST_LOG_PATH}:/var/logs/caddy
      - ${DATA_PATH_HOST}:/root/.caddy
    ports:
      - "${CADDY_HOST_HTTP_PORT}:80"
      - "${CADDY_HOST_HTTPS_PORT}:443"
    networks:
      - frontend
      - backend

### MySQL Container #########################################
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
        - TZ=${TZ}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend

### MariaDB Container #######################################
  mariadb:
    build:
      context: ./mariadb
      args:
        - MARIADB_VERSION=${MARIADB_VERSION}
        - TZ=${TZ}
    environment:
      - MYSQL_DATABASE=${MARIADB_DATABASE}
      - MYSQL_USER=${MARIADB_USER}
      - MYSQL_PASSWORD=${MARIADB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/mariadb:/var/lib/mysql
      - ${MARIADB_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MARIADB_PORT}:3306"
    networks:
      - backend

### PostgreSQL Container ####################################
  postgres:
    build: 
      context: ./postgres
      args: 
        - TZ=${TZ}
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - backend

### MongoDB Container #######################################
  mongodb:
    build: 
      context: ./mongodb
      args: 
        - TZ=${TZ}
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - ${DATA_PATH_HOST}/mongodb:/data/db
      - ${DATA_PATH_HOST}/mongo_config:/data/configdb
    networks:
      - backend

### couchdb Container #######################################
  couchdb:
    build:
      context: ./couchdb
      args: 
        - TZ=${TZ}
    environment:
      - COUCHDB_USER=${COUCHDB_USER}
      - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
    volumes:
      - ${DATA_PATH_HOST}/couchdb:/opt/couchdb/data
      - ${COUCHDB_HOST_LOG_PATH}:/usr/local/var/logs/couchdb
    ports:
      - "${COUCHDB_PORT}:5984"
    networks:
      - backend

### Redis Container #########################################
  redis:
    build: 
      context: ./redis
      args: 
        - TZ=${TZ}
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - backend

### Redis Cluster ###########################################
  redis-cluster:
    build: ./redis-cluster
    volumes:
      - ${DATA_PATH_HOST}/redis-cluster:/redis-data
    ports:
      - "${REDIS_CLUSTER_PORT_RANGE}:7000-7005"
    networks:
      - backend

### Memcached Container #####################################
  memcached:
    build: 
      context: ./memcached
      args: 
        - TZ=${TZ}
    volumes:
      - ${DATA_PATH_HOST}/memcached:/var/lib/memcached
    ports:
      - "${MEMCACHED_HOST_PORT}:11211"
    networks:
      - backend

### RabbitMQ #############################################
  rabbitmq:
    build: 
      context: ./rabbitmq
      args: 
        - TZ=${TZ}
    ports:
      - "${RABBITMQ_NODE_HOST_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
      - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
    privileged: true
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    volumes:
      - ${DATA_PATH_HOST}/rabbitmq:/var/lib/rabbitmq
    networks:
      - frontend
      - backend

### ElasticSearch ########################################
  elasticsearch:
    build: 
      context: ./elasticsearch
      args: 
        - TZ=${TZ}
    volumes:
      - ${DATA_PATH_HOST}/elasticsearch:/usr/share/elasticsearch/data
    environment:
      - cluster.name=cluster
      - node.name=node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.initial_master_nodes=node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
    networks:
      - frontend
      - backend

### Zookeeper ###########################################
  zookeeper:
    build: 
      context: ./zookeeper
    hostname: zookeeper
    # restart: always
    volumes:
      - ${DATA_PATH_HOST}/zookeeper/data:/data
      - ${DATA_PATH_HOST}/zookeeper/datakig:/datalog
      - ${ZOOKEEPER_HOST_LOG_PATH}:/logs
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    networks:
      - backend

### Kafka1   ###########################################
  kafka1:
    build: 
      context: ./kafka
    ports:
      - "${KAFKA_PORT1}:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_PORT}
      # 非必须，设置自动创建 topic
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
      - KAFKA_ADVERTISED_HOST_NAME=${HOST_IP}
      - KAFKA_ADVERTISED_PORT=${KAFKA_PORT1}
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${HOST_IP}:${KAFKA_PORT1}
      # - KAFKA_LISTENERS=PLAINTEXT://:${KAFKA_PORT1}
      # 非必须，设置对内存
      - KAFKA_HEAP_OPTS=${KAFKA_HEAP_OPTS}
      # 非必须，设置保存7天数据，为默认值
      - KAFKA_LOG_RETENTION_HOURS=${KAFKA_LOG_RETENTION_HOURS}
      - KAFKA_BROKER_ID=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    volumes:
      # 将 kafka 的数据文件映射出来
      - ${DATA_PATH_HOST}/kafka1:/kafka
      # - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - backend

### Kafka2   ###########################################
  kafka2:
    build: 
      context: ./kafka
    ports:
      - "${KAFKA_PORT2}:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_PORT}
      # 非必须，设置自动创建 topic
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
      - KAFKA_ADVERTISED_HOST_NAME=${HOST_IP}
      - KAFKA_ADVERTISED_PORT=${KAFKA_PORT2}
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${HOST_IP}:${KAFKA_PORT2}
      # - KAFKA_LISTENERS=PLAINTEXT://:${KAFKA_PORT2}
      # 非必须，设置对内存
      - KAFKA_HEAP_OPTS=${KAFKA_HEAP_OPTS}
      # 非必须，设置保存7天数据，为默认值
      - KAFKA_LOG_RETENTION_HOURS=${KAFKA_LOG_RETENTION_HOURS}
      - KAFKA_BROKER_ID=2
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    volumes:
      # 将 kafka 的数据文件映射出来
      - ${DATA_PATH_HOST}/kafka2:/kafka
      # - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - backend

### Kafka-manager   #####################################
  kafka-manager:
    image: sheepkiller/kafka-manager
    environment:
      - ZK_HOSTS=${HOST_IP}
    ports:
      - "${KAFKA_MAMAGER_PORT}:9000"